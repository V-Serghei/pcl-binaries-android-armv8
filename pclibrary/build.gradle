import org.gradle.api.tasks.Exec
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    id("maven-publish")

}
subprojects {
    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name = "pcl-binaries-android-armv8"
                url = uri("https://github.com/V-Serghei/pcl-binaries-android-armv8")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("V-Serghei")
                    password = project.findProperty("gpr.key") ?: System.getenv("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")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }
}
android {
    namespace 'com.example.pclibrary'
    compileSdk 34

    defaultConfig {
        minSdk 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters "arm64-v8a"
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    task unzipArchives(type: Copy) {
        // Указываем путь к папке, куда будут распакованы архивы
        def outputDir = file("$buildDir/libs/arm64-v8a")
        outputs.dir outputDir

        // Определяем файлы архивов
        def archives = fileTree(dir: 'pclibrary/src/main/cpp/pclib/jniLibs/arm64-v8a/pcl', includes: ['*.tar.0*'])

        // Создаем задачу для разархивирования
        from archives.collect { zipTree(it) }
        into outputDir
    }
    tasks.whenTaskAdded { task ->
        if (task.name.contains('assemble')) {
            task.dependsOn unzipArchives
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}